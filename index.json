[{"content":"Ever felt the need to have a local server set up so that you can test your webpages or just outright share some stuff(on same wifi that is).\nThis can be easily achieved by any computer that has python on it as it comes with its own server which can be accessed by the following command:\npython -m http.server 1234 Here 1234 is the port number which can be any open port of your choice.\nYou can access the server via your own IP followed by port like http://192.168.137.35:1234/. You get your IP by using ip a on linux and ipconfig on windows.\nBut I wanted a oneline solution that can easily start a server in the current directory and also show a QR according to IP as when on DHCP sometimes the local IP changes.\nSo its time to lay some PIPES now o_O\nGetting the IP You can get IP from ip a but that gives too much info, another tool could be used to get it directly but I\u0026rsquo;d prefer one regex pattern over 100 random tools. So we use the good old grep command with pattern matching to get the IP.\nip a | grep -E -o \u0026#34;([0-9]{1,3}[\\.]){3}[0-9]{1,3}\u0026#34; But this gives all the IPs, we only require the second one in order to get that we use sed to filter the output.\nip a | grep -E -o \u0026#34;([0-9]{1,3}[\\.]){3}[0-9]{1,3}\u0026#34; | sed -n \u0026#39;2p\u0026#39; Final oneliner We now combine this with echo and pipe the output into qr and then start the server to get things up and running. I personally add this whole with an alias in my .bashrc for ease of use; alternatively a script can also be created.\necho \u0026#34;http://$(ip a | grep -E -o \u0026#34;([0-9]{1,3}[\\.]){3}[0-9]{1,3}\u0026#34; | sed -n \u0026#39;2p\u0026#39;):1234/\u0026#34; | qr \u0026amp;\u0026amp; python -m http.server 1234 I use python-qrcode to generate qrcodes.\n","permalink":"https://nakul.tech/posts/python-local-server/","summary":"\u003cp\u003eEver felt the need to have a local server set up so that you can test your webpages or just outright share some stuff(on same wifi that is).\u003c/p\u003e\n\u003cp\u003eThis can be easily achieved by any computer that has python on it as it comes with its own server which can be accessed by the following command:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epython -m http.server \u003cspan style=\"color:#ae81ff\"\u003e1234\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eHere \u003cstrong\u003e1234\u003c/strong\u003e is the port number which can be any open port of your choice.\u003c/p\u003e","title":"Python Local Server"},{"content":"I had earlier solved this issue in my previous arch DWM build but that was somehow broken; so had to configure this again. Considering it was such a pain I thought of sharing my own approach.\nI wrote a small script that changes the volume based on the parameters passed via DWM, once the volume is changed a notification is sent via dunst.\nIdentifying Keys You first need to identify which keys toggle the volume, what is their assigned tag.\nIt can be easily done by using the following command:\nxev | awk -F\u0026#39;[ )]+\u0026#39; \u0026#39;/^KeyPress/ { a[NR+2] } NR in a { printf \u0026#34;%-3s %s\\n\u0026#34;, $5, $8 }\u0026#39; In my case they were:\nXF86_AudioRaiseVolume XF86_AudioLowerVolume XF86_AudioMute Script The following script volstat to be created and added to path like /usr/local/bin/\n#!/bin/bash pamixer -$1 $2 # Below for showing volume level(numeric), its stacks # notify-send -t 1000 \u0026#34;Volume is: $(pamixer --get-volume)\u0026#34; # Progress bar dunstify -t 1000 \u0026#34;Volume: \u0026#34; -h int:value:\u0026#34;`pamixer --get-volume`\u0026#34; DWM config changes Include this package #include \u0026lt;X11/XF86keysym.h\u0026gt; in config.h also add the following lines:\n/* volume keys */ static const char *upvol[] = {\u0026#34;volstat\u0026#34;, \u0026#34;i\u0026#34;, \u0026#34;5\u0026#34;, NULL}; //increases volume by 5 static const char *downvol[] = {\u0026#34;volstat\u0026#34;, \u0026#34;d\u0026#34;, \u0026#34;5\u0026#34;, NULL}; //decreases volume by 5 static const char *toggle[] = {\u0026#34;pamixer\u0026#34;, \u0026#34;-t\u0026#34;, NULL}; //for muting /* add in static const Key keys[] = {..} */ { 0, XF86XK_AudioRaiseVolume, spawn, {.v = upvol} }, { 0, XF86XK_AudioLowerVolume, spawn, {.v = downvol} }, { 0, XF86XK_AudioMute, spawn, {.v = toggle} }, The key name might differ according to your device\nDo sudo make clean install and also add dunst \u0026amp; to your .xinitrc file.\nI didnt configure for mute keypress as visual feedback for that via led was already present on my keyboard but it can be done in a similar fashion.\nDemo ","permalink":"https://nakul.tech/posts/media-keys-volume/","summary":"\u003cp\u003eI had earlier solved this issue in my previous arch DWM \u003ca href=\"https://github.com/codernakul/arch-dwm-setup\"\u003ebuild\u003c/a\u003e but that was somehow broken; so had to configure this again. Considering it was such a pain I thought of sharing my own approach.\u003c/p\u003e\n\u003cp\u003eI wrote a small script that changes the volume based on the parameters passed via DWM, once the volume is changed a notification is sent via \u003ca href=\"https://wiki.archlinux.org/title/Dunst\"\u003edunst\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"identifying-keys\"\u003eIdentifying Keys\u003c/h2\u003e\n\u003cp\u003eYou first need to identify which keys toggle the volume, what is their assigned tag.\u003c/p\u003e","title":"Volume keys in DWM"},{"content":"Sometime you need a GIF for your README or presentations but those online convertors are very annoying filled to the brim with ads and limited options. So in order to get rid of this I tried ffmpeg to convert video files into GIFs. You must have ffmpeg installed in your device to proceed, download link here.\nThe following command will do the trick:\nffmpeg -ss [start_time] -t [duration/no_of_seconds_from_start] -i [input].[extension(.mp4)/(.mkv)] -vf \u0026#34;fps=10,scale=[width]:[height]:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse\u0026#34; -loop 0 [output].[extension(.mp4)/(.mkv)] Summary Let me break it down for you:\nThe -ss and -t flag give the start time and how many seconds to take from that time for the GIF from the video, if the video is already clipped/you need the whole video just remove these flags.\nThe -i is to specify the input file.\nThe -vf flag specifies the properties of the GIF to be made you can change fps of GIF here (higher fps=larger file size) also in scale= you can provide the width and height of the GIF. If you need to change one dimension only/keep aspect ratio same as of video just provide one of the height/width and other as -1 the latter will taken care of by ffmpeg. The last argument of this flag is generating the pallete for the GIF which I would suggest to keep as is.\nYou can also give the flag -loop 0 for the GIF to loop the animation. And then just provide the output file name.\nAnd there you learned how to make GIFs in command line today! Cheers!\nExample The following command converts a video starting from 00:00:10s till the next 4 seconds with 10 fps and 200px width keeping the aspect ratio same.\nffmpeg -ss 10 -t 4 -i Bojji_OP.mp4 -vf \u0026#34;fps=10,scale=200:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse\u0026#34; -loop 0 bojji_200.gif ","permalink":"https://nakul.tech/posts/ffmpeg-gifs/","summary":"\u003cp\u003eSometime you need a GIF for your README or presentations but those online convertors are very annoying filled to the brim with ads and limited options. So in order to get rid of this I tried ffmpeg to convert video files into GIFs. You must have ffmpeg installed in your device to proceed, download link \u003ca href=\"https://www.ffmpeg.org/download.html\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe following command will do the trick:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effmpeg -ss \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003estart_time\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e -t \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eduration/no_of_seconds_from_start\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e-i \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003einput\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e.\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eextension\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e.mp4\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e/\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e.mkv\u003cspan style=\"color:#f92672\"\u003e)]\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e-vf \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fps=10,scale=[width]:[height]:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse\u0026#34;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e-loop \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eoutput\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e.\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eextension\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e.mp4\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e/\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e.mkv\u003cspan style=\"color:#f92672\"\u003e)]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"summary\"\u003eSummary\u003c/h2\u003e\n\u003cp\u003eLet me break it down for you:\u003c/p\u003e","title":"Create GIFs using ffmpeg"},{"content":"In computer security, Capture the Flag (CTF), a type of wargame, is a computer security competition. CTF contests are usually designed to serve as an educational exercise to give participants experience in securing a machine, as well as conducting and reacting to the sort of attacks found in the real world (i.e., bug bounty programs in professional settings). Reverse-engineering, network sniffing, protocol analysis, system administration, programming, and cryptoanalysis are all skills which have been required by Security professionals in the past.\nFlavours There are four main styles of capture the flag competitions:\nAttack/Defense : In an attack/defense style competition, each team is given a machine (or a small network) to defend on an isolated network. Teams are scored on both their success in defending their assigned machine(s) and on their success in attacking the other team’s machines. Depending on the nature of the particular CTF game, teams may either be attempting to take an opponent’s flag from their machine or teams may be attempting to plant their own flag on their opponent’s machine. Hardware challenges : Hardware challenges usually involve getting an unknown piece of hardware and having to figure out how to bypass part of the security, e.g. using debugging ports or using a Side-channel attack. and Jeopardy : Jeopardy style competitions usually involve multiple categories of problems, each of which contains a variety of questions of different point values and difficulties. Teams attempt to earn the most points in the competition’s time frame (for example 24 hours), but do not directly attack each other. Rather than a race, this style of game play encourages taking time to approach challenges and prioritizes quantity of correct submissions over the timing. KotH : There is a fourth type of CTF, most commonly referred to as King of the Hill (KotH). King of the Hill is similar to Attack/Defend, but instead of everyone having their own machine (or small network) to defend, there are only preconfigured ones, which require all teams to exploit them. Once a team has successfully taken over the machine, the focus shifts to defending the machine from other teams’ attacks. Score is usually determined by a score reporting service on the machine, that reports a team token. When one team is able to gain access, they will remove the other team’s token and insert their own, thus making them the King of the Hill. Start here A few helpful resources to learn and practice CTF are: OverTheWire, Hacker101, PicoCTF, HackThisSite, HackTheBox, Vulnhub\nAlthough, the only way to master CTF is via practice, there are not shortcuts but a few prerequisites to get used to CTF challenges.\nFirstly you need to have “try harder” approach and offensive approach. Secondly, a strong knowledge of networking is required, How the OSI and TCP/IP models work? Client-Server interactions, Http headers, various web technologies like HTML/CSS, JS and PHP. Some familiarity with the linux filesystem will be helpfull. Though not mandatory, having knowledge of any scripting language like Bash/Python apart from any regular programming is a bonus. Also, try going through writeups on a daily basis. Remember at the end its all about understanding how things work and not being a “SCRIPT KIDDIE”. ","permalink":"https://nakul.tech/posts/capture-the-flag/","summary":"\u003cp\u003eIn computer security, Capture the Flag (CTF), a type of wargame, is a computer security competition. CTF contests are usually designed to serve as an educational exercise to give participants experience in securing a machine, as well as conducting and reacting to the sort of attacks found in the real world (i.e., bug bounty programs in professional settings). Reverse-engineering, network sniffing, protocol analysis, system administration, programming, and cryptoanalysis are all skills which have been required by Security professionals in the past.\u003c/p\u003e","title":"CTFs - Capture the Flag"},{"content":"Hi, Nakul here, from now on I will be using this to write and maintain my own Blogs!\nThanks for reading!\n","permalink":"https://nakul.tech/posts/hello-world/","summary":"\u003cp\u003eHi, Nakul here, from now on I will be using this to write and maintain my own Blogs!\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThanks for reading!\u003c/p\u003e\u003c/blockquote\u003e","title":"Hello World!"}]